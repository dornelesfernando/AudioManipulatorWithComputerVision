import yt_dlp
import os

def baixar_melhor_audio_youtube(url_video, diretorio_saida = "music"):
    """
    Baixa o √°udio de um v√≠deo do YouTube no melhor formato de √°udio dispon√≠vel. O formato ser√° tipicamente .m4a ou similar.

    Args:
        url_video (str): A URL do v√≠deo do Youtube.
        diretorio_saida (str): O diret√≥rio onde o arquivo de √°udio ser√° salvo.
                               O padr√£o √© 'music'.
        
    Returns:
        str: O caminho completo para o arquivo de √°udio baixado, ou None se ocorrer algum erro.
    """

    if not os.path.exists(diretorio_saida):
        try:
            os.makedirs(diretorio_saida)
            print(f"Diret√≥rio '{diretorio_saida}' criado.'")
        except OSError as e:
            print(f"Erro ao criar diret√≥rio '{diretorio_saida}': {e}")
            return None
        
    # Configura√ß√µes para o yt-dlp para baixar o melhor √°udio sem convers√£o espec√≠fica
    ydl_opts = {
        'format': 'bestaudio/best',  # Seleciona o melhor √°udio-somente dispon√≠vel
        'outtmpl': os.path.join(diretorio_saida, '%(title)s.%(ext)s'), # Nomeia o arquivo com o t√≠tulo e sua extens√£o original
        'keepvideo': False,          # N√£o mant√©m arquivos de v√≠deo se um formato de v√≠deo for baixado temporariamente
        'noplaylist': True,          # Baixa apenas o v√≠deo especificado, n√£o a playlist inteira
        'quiet': False,              # Mostra o output do yt-dlp
        'progress': True,            # Mostra barra de progresso
        'nocheckcertificate': True,  # Pode ajudar com alguns erros de SSL
        # NENHUM postprocessor para for√ßar a convers√£o para WAV ou outro formato espec√≠fico.
        # O yt-dlp tentar√° salvar o √°udio no formato em que √© oferecido (ex: m4a, opus em webm).
    }

    nome_arquivo_final = None

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            print(f"Iniciando download do melhor √°udio para: {url_video}")
            # O m√©todo extract_info com download=True far√° o download.
            info_dict = ydl.extract_info(url_video, download=True)

            nome_arquivo_final = ydl.prepare_filename(info_dict)

            if os.path.exists(nome_arquivo_final):
                print(f"\nDownload de √°udio conclu√≠do com sucesso!")
                print(f"Formato do arquivo: .{nome_arquivo_final.split('.')[-1]}")
                print(f"Arquivo salvo em: {os.path.abspath(nome_arquivo_final)}")
                return os.path.abspath(nome_arquivo_final)
            else:
                print(f"\nErro: O arquivo de √°udio esperado ({nome_arquivo_final}) n√£o foi encontrado ap√≥s o processo de download.")
                print("Verifique se houve mensagens de erro durante o download.")
                print(f"Arquivos encontrados no diret√≥rio de sa√≠da ('{diretorio_saida}'):")
                if os.path.exists(diretorio_saida):
                    for item in os.listdir(diretorio_saida):
                        print(f"  - {item}")
                else:
                    print("  (Diret√≥rio de sa√≠da n√£o encontrado)")
                return None    
    except yt_dlp.utils.DownloadError as e:
        print(f"\nErro de download do yt-dlp: {e}")
        if "Unsupported URL" in str(e):
            print("A URL fornecida parece n√£o ser suportada ou √© inv√°lida.")
        elif "Video unavailable" in str(e):
            print("O v√≠deo pode estar indispon√≠vel (privado, removido, restri√ß√£o de idade/geogr√°fica).")
        elif "HTTP Error 403" in str(e) or "Access Denied" in str(e):
            print("Acesso negado. O v√≠deo pode ser privado ou requerer login, ou o YouTube pode estar bloqueando o acesso program√°tico.")
        else:
            print("Verifique a URL do v√≠deo e sua conex√£o com a internet. Algumas vezes, tentar novamente mais tarde pode funcionar.")
        return None
    except Exception as e:
        print(f"\nOcorreu um erro inesperado durante a execu√ß√£o: {e}")
        return None
    
if __name__ == "__main__":
    # üîΩüîΩüîΩ MODIFIQUE A LINHA ABAIXO PARA A URL DO V√çDEO DESEJADO üîΩüîΩüîΩ
    url_do_video_youtube = "https://www.youtube.com/watch?v=dQw4w9WgXcQ" 
    # Exemplo: url_do_video_youtube = "https://www.youtube.com/watch?v=dQw4w9WgXcQ" # Substitua por uma URL real
    # üîºüîºüîº MODIFIQUE A LINHA ACIMA PARA A URL DO V√çDEO DESEJADO üîºüîºüîº

    pasta_de_destino = "music"

    if url_do_video_youtube == "URL_DO_SEU_VIDEO_AQUI" or not url_do_video_youtube.startswith("http"):
        print("******************************************************************************************")
        print("* POR FAVOR, EDITE O SCRIPT!                                                             *")
        print("* Abra este arquivo Python e altere a vari√°vel 'url_do_video_youtube'                    *")
        print("* para a URL completa do v√≠deo do YouTube que voc√™ deseja baixar.                        *")
        print("* Exemplo de como deve ficar no c√≥digo:                                                  *")
        print("* url_do_video_youtube = \"https://www.youtube.com/watch?v=videoID\"                 *") # Exemplo com aspas corretas
        print("******************************************************************************************")
    else:
        print(f"M√∫sica para download (melhor √°udio dispon√≠vel): {url_do_video_youtube}")
        caminho_do_arquivo_audio = baixar_melhor_audio_youtube(url_do_video_youtube, pasta_de_destino)

        if caminho_do_arquivo_audio:
            print(f"\nDownload da m√∫sica conclu√≠do com sucesso!")
            # A mensagem sobre o local e formato j√° √© impressa dentro da fun√ß√£o.
        else:
            print("\nFalha no download da m√∫sica. Verifique as mensagens de erro acima.")